// Creado por Marc Millán Gimeno
// Login : ls29307

/**
 * Video Application.
 *
 */
(function(){
	"use strict";

/**
 * Objeto Videos para crear elementos necesarios.
 */
var Videos = {

	/*
	*Hago una petición de información mediante la api
	*Recivo toda la info mediante el jason de retorno
	*/
	api: {},
	container_id: "videos",
	autoplay: true,
    getVideos: function getVideos(){
    	var json_response = JSON.parse(this.api.request());
    	return this.api.getVideos(json_response);
    },

    //Creación de la imagen peeliminar de cada video
    createVideoImage: function createVideoImage(src, title, id){
	    //Creamos figure para crear la imagen

	    ///////////////////////////////
		// Aquí tu código para crear los nodos del DOM para mostrar las imagenes de los videos.
		// Puedes utilizar el objeto Layout para ayudarte.
		// Crea un nodo "figure" y añade la imagen como "Child"

	    var figure = document.createElement("figure");
		//Necesitamos crear <figcaption> ya que crea subtítulo asociado con una imagen
		var figcap = document.createElement("figcaption");

		//Añado el titulo que me llega de la función y lo incluyo dentro del fig_capture
	    figcap.appendChild(this.createTitle(title));
	    //Mediante el Layout creo la imagen con la info. de "src", imagen del video.
	    figure.appendChild(Layout.createImage(src,"Imatge"));
	    //Añado el titulo a la figure
	    figure.appendChild(figcap);
    	//Creo el link para reproducir el video
	    figure.appendChild(this.createPlayLink(id));
		
		///////////////////////////////

	    return figure;
    },

    createTitle: function createTitle(title){
    	//Modificamos el h2 a h3 ya que es más adecuado
    	var title_tag = document.createElement("h3");
    	var title_text = document.createTextNode(title);

    	///////////////////////////////
		// Devuelve el objeto title_tag con el title.
    	title_tag.appendChild(title_text);
    	
		///////////////////////////////

	    return title_tag;
    },

    createPlayLink: function createPlayLink(video_id){
    	var link = document.createElement("a");
	    link.className = "play-video";
	    link.href = "#";
	    link.setAttribute("data-video-id", video_id);

		///////////////////////////////
		// Aquí tu código
		// Puedes utilizar el objeto Layout para ayudarte.
		// Crea un nodo "image" con la ruta del icono y añadelo como "Child" al link

		//Creo un elemento image
	    var image = document.createElement("image");
		
		//pertenecerá a la playe "play brand-backgroud"
	    image.className = "play brand-background";
		//Incluimos en el elemento link el icono del play
	    link.appendChild(image);

		///////////////////////////////

		// Apply listener to event click.
		Listener.add(
			link,
			"click",
	    	Listener.eventPlay,
		    false
		);

		return link;
    },

	renderVideosList: function renderVideosList(videos,container){
		
		///////////////////////////////
		// Aquí tu código para mostrar el listado de videos.
		
		var figure;
		var Ilista;

		//Necesitamos un for de 15 iteraciones para incluir la cantidad de videos requeridos	
		for(var j = 0; j < limit_results; j++){
			/*
			* Creo la la imagen, el titulo y el play con la funcion implementada createVideoImage
			* Le envio a esta el link del la imagen de la api, el titulo, y el link del propio video
			*/
			figure = this.createVideoImage(this.api.getImagePath(videos[j]),this.api.getVideoTitle(videos[j]),videos[j].id);
			//console.log(videos[i].id);
			//Creo un elemento li para meterlos en una lista
			Ilista = document.createElement("li");
			Ilista.className = "video";
			//Añadimos la figura con el video completo a la linea pertinente
			Ilista.appendChild(figure);
			//Se añade el li dento del ul que engloba todos (15) videos
			document.getElementsByTagName('ul')[0].appendChild(Ilista);
		}
	},

	replaceImageByVideo: function replaceImageByVideo(id_video){
		
		var ImageToVideo;
		ImageToVideo = this.api.getVideoIframe(id_video,true);
		console.log(id_video);
		return ImageToVideo;
	},

	resetApplication: function resetApplication(){

		///////////////////////////////
		// Aquí tu código para reemplazar la imagen por el player de Youtube.

		var cont = document.getElementById(this.container_id);
		
		if(cont){
			cont.parentNode.removeChild(cont);
		}
		///////////////////////////////
	},

    start: function start(api){

    	//Comentamos el reset
    	//this.resetApplication()
    	this.api = api;

    	var container = Layout.createContainer(this.container_id, "ul");
		this.renderVideosList( this.getVideos(), container );
    }
}

/**
 * Objeto Youtube para obtener los datos desde la respuesta JSON.
 */
function Youtube(api_url){
	// Private variable. 
	var api_url = api_url;

	// Named function - private.
	this.request = function request(){

		///////////////////////////////
		// Aquí tu código para llamar a la API de Yotube y obtener el JSON.
		// Puedes hacer uso del objeto AJAX ofrecido en aquí.
		return AJAX.request(api_url);
		///////////////////////////////
    }

    // Anonymous function - private.
	this.getVideos = function getVideos(video_object){
		///////////////////////////////
		// Aquí tu código para obtener los items de los videos.
		return video_object.items;


		///////////////////////////////
	}

	// Anonymous function assigned to a var - private.
	this.getImagePath = function getImagePath(video){
		///////////////////////////////
		// Aquí tu código para obtener las urls de las imágenes de los videos.

		return video.snippet.thumbnails.default.url;

		///////////////////////////////
	}

	// Only available using "new".
	this.getVideoIframe = function getVideoIframe(video_id, autoplay){

		var iframe = document.createElement("iframe");
		//Ajustamos el video al tamaño que necesitamos
		iframe.width = 370;
		iframe.height = 280;
		iframe.frameborder = 0;
		iframe.allowfullscreen;
		iframe.src = "http://www.youtube.com/embed/"+video_id;
		if(autoplay){
			iframe.src += "?autoplay=1";
		}
		
		return iframe;
	}

	this.getVideoTitle = function getVideoTitle(video){

		///////////////////////////////
		// Aquí tu código para obtener el título de los videos.

		return video.snippet.title;

		///////////////////////////////
	}

	this.getVideoId = function getVideoId(video)
	{
		if(typeof video.id === "string"){
			return video.id;
		}

		if(typeof video.id === "object"){
			return video.id.videoId;
		}
	}
}

/**
 * Search form.
 */
var Search = {
	addListener: function addListener(){
		
		///////////////////////////////
		// Aquí tu código para realizar capturar
		// el submit de la busqueda.
		var button = document.getElementById("action-search");	

		///////////////////////////////	

		// Apply listener to the search button.
		Listener.add(
			button,
			"click",
			Listener.eventSearch,
			false
		);
	}
}

/**
 * Objeto simple para realizar llamadas AJAX.
 */
var AJAX = {
	request: function request(url){
		///////////////////////////////
		// Aquí tu código para realizar peticiones AJAX con XMLHttpRequest
		// y devolver los datos.

		var xhr = new XMLHttpRequest();

		//Abrir peticion
		xhr.open("GET", url, false);

		//Enviar petición
		xhr.send();

		return xhr.responseText;
		///////////////////////////////
	}
}

/*
 * Objeto Layout para crear los nodos del DOM necesarios para visualizar los videos.
 */
var Layout = {
	createContainer: function createContainer(id, element){
    	var container = document.createElement(element);
		container.id = id;

		return container;
    },
    createImage: function createImage(src, alt){
    	var img = document.createElement("img");
	    img.src = src;
	    img.alt = alt;
	    return img;
    },
    renderContainer: function renderContainer(container){
    	document.body.appendChild(container);
    },
}

/**
 * Object Listener to add and manage events.
 */
var Listener = {
	add: function add(object, event, callback, capture){
		object.addEventListener(event,callback,capture);
	},
	eventPlay: function eventPlay(event){
		
		///////////////////////////////
		// Recuerda siempre anular el evento por defecto con esta sentencia.
		
		var idVideo = event.target.parentNode.dataset.videoId;
		var imageframe;
		imageframe = Videos.replaceImageByVideo(idVideo);
		event.target.parentNode.parentNode.parentNode.appendChild(imageframe);
		event.target.parentNode.parentNode.parentNode.removeChild(event.target.parentNode.parentNode.parentNode.childNodes[0]);
		

		///////////////////////////////
	},
	// Busqueda opcional
	eventSearch: function eventSearch(event){

		
		var query = event.target.parentNode.childNodes[0].value;
		if(!query){
			alert("Your search is short.");
			return false
		}

		var api_url = "https://www.googleapis.com/youtube/v3/search?part=snippet&videoEmbeddable=true&order=viewCount&q="+query+"&maxResults="+ limit_results +"&type=video&videoDefinition=high&key="+google_api_key;
		Videos.start(new Youtube(api_url));
	}
}

var Application = {
	start: function start(key,country,limit_results,video_category_id){
		Search.addListener();

		var api_url = "https://www.googleapis.com/youtube/v3/videos?chart=MostPopular&regionCode="+country+"&maxResults="+ limit_results +"&videoCategoryId="+ video_category_id +"&key="+key+"&part=snippet,player";
		Videos.start(new Youtube(api_url));
	}
}

var limit_results = 15;

// Inicia la aplicación cuando el DOM se ha cargado.
var country = "jp";
Listener.add(
	document,
	"DOMContentLoaded",
	Application.start(
		google_api_key,
		country,
		limit_results,
		0
	),
	false
);

}());